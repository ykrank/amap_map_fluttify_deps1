//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler11 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.amap.api.maps.TextureMapView::setVisibility_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.TextureMapView ref = (com.amap.api.maps.TextureMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setVisibility(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::calculateLineDistance_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.LatLng var0 = __var0RefId__ != null ? (com.amap.api.maps.model.LatLng) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.LatLng var1 = __var1RefId__ != null ? (com.amap.api.maps.model.LatLng) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = com.amap.api.maps.AMapUtils.calculateLineDistance(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::calculateArea__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.LatLng var0 = __var0RefId__ != null ? (com.amap.api.maps.model.LatLng) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.LatLng var1 = __var1RefId__ != null ? (com.amap.api.maps.model.LatLng) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = com.amap.api.maps.AMapUtils.calculateArea(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::calculateArea__List_com_amap_api_maps_model_LatLng__batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> var0RefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("var0");
                    java.util.List<com.amap.api.maps.model.LatLng> var0 = new ArrayList<>();
                    for (int refId : var0RefIdList) {
                        ((ArrayList<com.amap.api.maps.model.LatLng>) var0).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                    }
            
                    // ref
            
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = com.amap.api.maps.AMapUtils.calculateArea((ArrayList) var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::getLatestAMapApp_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    android.content.Context var0 = __var0RefId__ != null ? (android.content.Context) getHEAP().get(__var0RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.maps.AMapUtils.getLatestAMapApp(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::openAMapNavi_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.NaviPara var0 = __var0RefId__ != null ? (com.amap.api.maps.model.NaviPara) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.content.Context var1 = __var1RefId__ != null ? (android.content.Context) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.maps.AMapUtils.openAMapNavi(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::openAMapPoiNearbySearch_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.PoiPara var0 = __var0RefId__ != null ? (com.amap.api.maps.model.PoiPara) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.content.Context var1 = __var1RefId__ != null ? (android.content.Context) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.maps.AMapUtils.openAMapPoiNearbySearch(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::openAMapDrivingRoute_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.RoutePara var0 = __var0RefId__ != null ? (com.amap.api.maps.model.RoutePara) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.content.Context var1 = __var1RefId__ != null ? (android.content.Context) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.maps.AMapUtils.openAMapDrivingRoute(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::openAMapTransitRoute_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.RoutePara var0 = __var0RefId__ != null ? (com.amap.api.maps.model.RoutePara) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.content.Context var1 = __var1RefId__ != null ? (android.content.Context) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.maps.AMapUtils.openAMapTransitRoute(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMapUtils::openAMapWalkingRoute_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    com.amap.api.maps.model.RoutePara var0 = __var0RefId__ != null ? (com.amap.api.maps.model.RoutePara) getHEAP().get(__var0RefId__) : null;
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.content.Context var1 = __var1RefId__ != null ? (android.content.Context) getHEAP().get(__var1RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.maps.AMapUtils.openAMapWalkingRoute(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowAppearAnimation_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.animation.Animation var1 = __var1RefId__ != null ? (com.amap.api.maps.model.animation.Animation) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowAppearAnimation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowBackColor_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowBackColor(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowBackEnable_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowBackEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowBackScale_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowBackScale(new Double(var1).floatValue(), new Double(var2).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowDisappearAnimation_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.animation.Animation var1 = __var1RefId__ != null ? (com.amap.api.maps.model.animation.Animation) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowDisappearAnimation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::setInfoWindowMovingAnimation_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.animation.Animation var1 = __var1RefId__ != null ? (com.amap.api.maps.model.animation.Animation) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowMovingAnimation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.InfoWindowAnimationManager::startAnimation_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.InfoWindowAnimationManager ref = (com.amap.api.maps.InfoWindowAnimationManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startAnimation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::getMap_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.AMap __result__;
                    try {
                        __result__ = ref.getMap();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onCreate_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.os.Bundle var1 = __var1RefId__ != null ? (android.os.Bundle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onCreate(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onResume_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onResume();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onPause_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onPause();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onDestroy_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onDestroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onLowMemory_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onLowMemory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onSaveInstanceState_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.os.Bundle var1 = __var1RefId__ != null ? (android.os.Bundle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onSaveInstanceState(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::setVisibility_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setVisibility(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onDismiss_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onDismiss();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onEnterAmbient_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.os.Bundle var1 = __var1RefId__ != null ? (android.os.Bundle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEnterAmbient(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.WearMapView::onExitAmbient_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.WearMapView ref = (com.amap.api.maps.WearMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onExitAmbient();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.BaseMapView::loadWorldVectorMap_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.BaseMapView ref = (com.amap.api.maps.BaseMapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.loadWorldVectorMap(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getCameraPosition_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.CameraPosition __result__;
                    try {
                        __result__ = ref.getCameraPosition();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMaxZoomLevel_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getMaxZoomLevel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMinZoomLevel_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getMinZoomLevel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::moveCamera_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.CameraUpdate var1 = __var1RefId__ != null ? (com.amap.api.maps.CameraUpdate) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.moveCamera(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::animateCamera__com_amap_api_maps_CameraUpdate_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.CameraUpdate var1 = __var1RefId__ != null ? (com.amap.api.maps.CameraUpdate) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.animateCamera(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::stopAnimation_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopAnimation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addNavigateArrow_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.NavigateArrowOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.NavigateArrowOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.NavigateArrow __result__;
                    try {
                        __result__ = ref.addNavigateArrow(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addPolyline_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.PolylineOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.PolylineOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.Polyline __result__;
                    try {
                        __result__ = ref.addPolyline(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addBuildingOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.BuildingOverlay __result__;
                    try {
                        __result__ = ref.addBuildingOverlay();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addCircle_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.CircleOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.CircleOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.Circle __result__;
                    try {
                        __result__ = ref.addCircle(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addArc_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.ArcOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.ArcOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.Arc __result__;
                    try {
                        __result__ = ref.addArc(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addPolygon_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.PolygonOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.PolygonOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.Polygon __result__;
                    try {
                        __result__ = ref.addPolygon(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addGroundOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.GroundOverlayOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.GroundOverlayOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.GroundOverlay __result__;
                    try {
                        __result__ = ref.addGroundOverlay(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addMarker_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.MarkerOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.MarkerOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.Marker __result__;
                    try {
                        __result__ = ref.addMarker(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addGL3DModel_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.GL3DModelOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.GL3DModelOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.GL3DModel __result__;
                    try {
                        __result__ = ref.addGL3DModel(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addText_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.TextOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.TextOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.Text __result__;
                    try {
                        __result__ = ref.addText(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addMarkers_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("var1");
                    java.util.ArrayList<com.amap.api.maps.model.MarkerOptions> var1 = new ArrayList<>();
                    for (int refId : var1RefIdList) {
                        ((ArrayList<com.amap.api.maps.model.MarkerOptions>) var1).add((com.amap.api.maps.model.MarkerOptions) getHEAP().get(refId));
                    }
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) __args__).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    java.util.ArrayList<com.amap.api.maps.model.Marker> __result__;
                    try {
                        __result__ = ref.addMarkers((ArrayList) var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<Integer> jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = new ArrayList<>();
                        for (com.amap.api.maps.model.Marker item : __result__) {
                            getHEAP().put(System.identityHashCode(item), item);
                            jsonableResult.add(System.identityHashCode(item));
                        }
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMapScreenMarkers_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    java.util.List<com.amap.api.maps.model.Marker> __result__;
                    try {
                        __result__ = ref.getMapScreenMarkers();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<Integer> jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = new ArrayList<>();
                        for (com.amap.api.maps.model.Marker item : __result__) {
                            getHEAP().put(System.identityHashCode(item), item);
                            jsonableResult.add(System.identityHashCode(item));
                        }
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addTileOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.TileOverlayOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.TileOverlayOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.TileOverlay __result__;
                    try {
                        __result__ = ref.addTileOverlay(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addHeatMapLayer_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.HeatMapLayerOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.HeatMapLayerOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.HeatMapLayer __result__;
                    try {
                        __result__ = ref.addHeatMapLayer(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addMultiPointOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.MultiPointOverlayOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.MultiPointOverlayOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.MultiPointOverlay __result__;
                    try {
                        __result__ = ref.addMultiPointOverlay(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addParticleOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.particle.ParticleOverlayOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.particle.ParticleOverlayOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.particle.ParticleOverlay __result__;
                    try {
                        __result__ = ref.addParticleOverlay(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::clear_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.clear();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::clear__bool_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.clear(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMapType_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getMapType();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMapType_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMapType(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::isTrafficEnabled_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = ref.isTrafficEnabled();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setTrafficEnabled_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTrafficEnabled(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::showMapText_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.showMapText(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::showIndoorMap_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.showIndoorMap(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::showBuildings_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.showBuildings(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMyTrafficStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.MyTrafficStyle var1 = __var1RefId__ != null ? (com.amap.api.maps.model.MyTrafficStyle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMyTrafficStyle(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMyTrafficStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.MyTrafficStyle __result__;
                    try {
                        __result__ = ref.getMyTrafficStyle();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::isMyLocationEnabled_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = ref.isMyLocationEnabled();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMyLocationEnabled_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMyLocationEnabled(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMyLocation_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    android.location.Location __result__;
                    try {
                        __result__ = ref.getMyLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMyLocationStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.MyLocationStyle var1 = __var1RefId__ != null ? (com.amap.api.maps.model.MyLocationStyle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMyLocationStyle(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMyLocationStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.MyLocationStyle __result__;
                    try {
                        __result__ = ref.getMyLocationStyle();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMyLocationType_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMyLocationType(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMyLocationRotateAngle_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMyLocationRotateAngle(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getUiSettings_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.UiSettings __result__;
                    try {
                        __result__ = ref.getUiSettings();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getProjection_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.Projection __result__;
                    try {
                        __result__ = ref.getProjection();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setInfoWindowAdapter_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.AMap.InfoWindowAdapter var1 = __var1RefId__ != null ? (com.amap.api.maps.AMap.InfoWindowAdapter) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInfoWindowAdapter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getScalePerPixel_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getScalePerPixel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::runOnDrawFrame_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.runOnDrawFrame();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::removecache_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.removecache();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setPointToCenter_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) __args__).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setPointToCenter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMapTextZIndex_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMapTextZIndex(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setLoadOfflineData_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLoadOfflineData(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMapTextZIndex_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getMapTextZIndex();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getVersion_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String __result__;
                    try {
                        __result__ = com.amap.api.maps.AMap.getVersion();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::reloadMap_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.reloadMap();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setRenderFps_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRenderFps(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setIndoorBuildingInfo_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.IndoorBuildingInfo var1 = __var1RefId__ != null ? (com.amap.api.maps.model.IndoorBuildingInfo) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setIndoorBuildingInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getZoomToSpanLevel_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.LatLng var1 = __var1RefId__ != null ? (com.amap.api.maps.model.LatLng) getHEAP().get(__var1RefId__) : null;
                    // ref arg
                    Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                    com.amap.api.maps.model.LatLng var2 = __var2RefId__ != null ? (com.amap.api.maps.model.LatLng) getHEAP().get(__var2RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getZoomToSpanLevel(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getInfoWindowAnimationManager_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.InfoWindowAnimationManager __result__;
                    try {
                        __result__ = ref.getInfoWindowAnimationManager();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMaskLayerParams_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                    // jsonable arg
                    long var6 = (long) (int) ((Map<String, Object>) __args__).get("var6");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMaskLayerParams(var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMaxZoomLevel_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMaxZoomLevel(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMinZoomLevel_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMinZoomLevel(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::resetMinMaxZoomPreference_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.resetMinMaxZoomPreference();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMapStatusLimits_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.LatLngBounds var1 = __var1RefId__ != null ? (com.amap.api.maps.model.LatLngBounds) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMapStatusLimits(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addCrossOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.CrossOverlayOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.CrossOverlayOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.CrossOverlay __result__;
                    try {
                        __result__ = ref.addCrossOverlay(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::addRouteOverlay_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.model.RouteOverlay __result__;
                    try {
                        __result__ = ref.addRouteOverlay();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getViewMatrix_batch", (__argsBatch__, __methodResult__) -> {
                List<float[]> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    float[] __result__;
                    try {
                        __result__ = ref.getViewMatrix();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float[] jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getProjectionMatrix_batch", (__argsBatch__, __methodResult__) -> {
                List<float[]> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    float[] __result__;
                    try {
                        __result__ = ref.getProjectionMatrix();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float[] jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMapCustomEnable_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMapCustomEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setCustomMapStylePath_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCustomMapStylePath(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setCustomMapStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    com.amap.api.maps.model.CustomMapStyleOptions var1 = __var1RefId__ != null ? (com.amap.api.maps.model.CustomMapStyleOptions) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCustomMapStyle(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setCustomMapStyleID_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCustomMapStyleID(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setCustomTextureResourcePath_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCustomTextureResourcePath(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setRenderMode_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRenderMode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getMapContentApprovalNumber_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    String __result__;
                    try {
                        __result__ = ref.getMapContentApprovalNumber();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getSatelliteImageApprovalNumber_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    String __result__;
                    try {
                        __result__ = ref.getSatelliteImageApprovalNumber();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setMapLanguage_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMapLanguage(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setRoadArrowEnable_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRoadArrowEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setNaviLabelEnable_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setNaviLabelEnable(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setTouchPoiEnable_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTouchPoiEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::isTouchPoiEnable_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = ref.isTouchPoiEnable();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getNativeMapController_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    long __result__;
                    try {
                        __result__ = ref.getNativeMapController();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::setWorldVectorMapStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setWorldVectorMapStyle(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::getCurrentStyle_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    String __result__;
                    try {
                        __result__ = ref.getCurrentStyle();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.AMap::accelerateNetworkInChinese_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.AMap ref = (com.amap.api.maps.AMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.accelerateNetworkInChinese(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::getMap_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.maps.AMap __result__;
                    try {
                        __result__ = ref.getMap();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::onCreate_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.os.Bundle var1 = __var1RefId__ != null ? (android.os.Bundle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onCreate(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::onResume_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onResume();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::onPause_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onPause();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::onDestroy_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onDestroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::onLowMemory_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onLowMemory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::onSaveInstanceState_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                    android.os.Bundle var1 = __var1RefId__ != null ? (android.os.Bundle) getHEAP().get(__var1RefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onSaveInstanceState(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.maps.MapView::setVisibility_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.maps.MapView ref = (com.amap.api.maps.MapView) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setVisibility(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getLatitude_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double __result__;
                    try {
                        __result__ = ref.getLatitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setLatitude_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLatitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getLongitude_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double __result__;
                    try {
                        __result__ = ref.getLongitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setLongitude_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLongitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getSpeed_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getSpeed();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setSpeed_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setSpeed(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getBearing_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getBearing();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setBearing_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setBearing(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    long __result__;
                    try {
                        __result__ = ref.getTime();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setTime_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTime(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::copy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.trace.TraceLocation __result__;
                    try {
                        __result__ = ref.copy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.LBSTraceClient::getInstance_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __var0RefId__ = (Integer) ((Map<String, Object>) __args__).get("var0");
                    android.content.Context var0 = __var0RefId__ != null ? (android.content.Context) getHEAP().get(__var0RefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    com.amap.api.trace.LBSTraceClient __result__;
                    try {
                        __result__ = com.amap.api.trace.LBSTraceClient.getInstance(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.LBSTraceClient::stopTrace_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.LBSTraceClient ref = (com.amap.api.trace.LBSTraceClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopTrace();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.LBSTraceClient::destroy_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.LBSTraceClient ref = (com.amap.api.trace.LBSTraceClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::add_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("var1");
                    java.util.List<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                    for (int refId : var1RefIdList) {
                        ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                    }
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.add((ArrayList) var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::remove_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.remove();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setProperCamera_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("var1");
                    java.util.List<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                    for (int refId : var1RefIdList) {
                        ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                    }
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setProperCamera((ArrayList) var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::zoopToSpan_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.zoopToSpan();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::getTraceStatus_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getTraceStatus();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setTraceStatus_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTraceStatus(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::getDistance_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getDistance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setDistance_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setDistance(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::getWaitTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getWaitTime();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setWaitTime_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setWaitTime(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            put("RefClass::isKindOfcom_amap_api_offlineservice_AMapPermissionActivity", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.offlineservice.AMapPermissionActivity);
            });
            put("RefClass::isKindOfcom_amap_api_maps_UiSettings", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.UiSettings);
            });
            put("RefClass::isKindOfcom_amap_api_maps_SwipeDismissTouchListener", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.SwipeDismissTouchListener);
            });
            put("RefClass::isKindOfcom_amap_api_maps_InfoWindowParams", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.InfoWindowParams);
            });
            put("RefClass::isKindOfcom_amap_api_maps_CameraUpdateFactory", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.CameraUpdateFactory);
            });
            put("RefClass::isKindOfcom_amap_api_maps_AMapException", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.AMapException);
            });
            put("RefClass::isKindOfcom_amap_api_maps_AMapOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.AMapOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_AMapOptionsCreator", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.AMapOptionsCreator);
            });
            put("RefClass::isKindOfcom_amap_api_maps_CoordinateConverter", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.CoordinateConverter);
            });
            put("RefClass::isKindOfcom_amap_api_maps_utils_SpatialRelationUtil", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.utils.SpatialRelationUtil);
            });
            put("RefClass::isKindOfcom_amap_api_maps_utils_overlay_MovingPointOverlay", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.utils.overlay.MovingPointOverlay);
            });
            put("RefClass::isKindOfcom_amap_api_maps_utils_overlay_SmoothMoveMarker", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.utils.overlay.SmoothMoveMarker);
            });
            put("RefClass::isKindOfcom_amap_api_maps_CameraUpdate", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.CameraUpdate);
            });
            put("RefClass::isKindOfcom_amap_api_maps_SwipeDismissCallBack", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.SwipeDismissCallBack);
            });
            put("RefClass::isKindOfcom_amap_api_maps_SwipeDismissView", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.SwipeDismissView);
            });
            put("RefClass::isKindOfcom_amap_api_maps_MapsInitializer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.MapsInitializer);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_OfflineMapStatus", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.OfflineMapStatus);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_OfflineMapProvince", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.OfflineMapProvince);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_DownloadProgressView", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.DownloadProgressView);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_Province", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.Province);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_OfflineMapManager", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.OfflineMapManager);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_OfflineMapCity", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.OfflineMapCity);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_OfflineMapActivity", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.OfflineMapActivity);
            });
            put("RefClass::isKindOfcom_amap_api_maps_offlinemap_City", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.offlinemap.City);
            });
            put("RefClass::isKindOfcom_amap_api_maps_Projection", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.Projection);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_Polygon", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.Polygon);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_HeatMapLayerOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.HeatMapLayerOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_BitmapDescriptor", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.BitmapDescriptor);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_PolygonHoleOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.PolygonHoleOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_TileOverlayOptionsCreator", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.TileOverlayOptionsCreator);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_Poi", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.Poi);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_MyLocationStyle", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.MyLocationStyle);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_RouteOverlay", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.RouteOverlay);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_VisibleRegion", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.VisibleRegion);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_LatLngCreator", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.LatLngCreator);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_CircleHoleOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.CircleHoleOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_Text", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.Text);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_LatLngBounds_Builder", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.LatLngBounds.Builder);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_HeatMapLayer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.HeatMapLayer);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_NavigateArrowOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.NavigateArrowOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_BitmapDescriptorFactory", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.BitmapDescriptorFactory);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_UrlTileProvider", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.UrlTileProvider);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_MultiPointOverlayOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.MultiPointOverlayOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_PoiCreator", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.PoiCreator);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_PolylineOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.PolylineOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_Tile", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.Tile);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_GL3DModel", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.GL3DModel);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_Gradient", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.Gradient);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_HeatMapItem", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.HeatMapItem);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_NaviPara", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.NaviPara);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_GroundOverlayOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.GroundOverlayOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_GL3DModelOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.GL3DModelOptions);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_GroundOverlay", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.GroundOverlay);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_MyTrafficStyle", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.MyTrafficStyle);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_CameraPosition", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.CameraPosition);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_TextOptionsCreator", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.TextOptionsCreator);
            });
            put("RefClass::isKindOfcom_amap_api_maps_model_PoiPara", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof com.amap.api.maps.model.PoiPara);
            });
        }};
    }
}
