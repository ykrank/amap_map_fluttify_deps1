//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler7.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler7)
- (NSDictionary<NSString*, Handler>*) getSubHandler7 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"RefClass::isKindOfMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineCity");
            }
        
            MAOfflineCity* ref = [[MAOfflineCity alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemNationWide");
            }
        
            MAOfflineItemNationWide* ref = [[MAOfflineItemNationWide alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPoint");
            }
        
            MAMultiPoint* ref = [[MAMultiPoint alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGroundOverlay");
            }
        
            MAGroundOverlay* ref = [[MAGroundOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolygonRenderer");
            }
        
            MAPolygonRenderer* ref = [[MAPolygonRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPinAnnotationView");
            }
        
            MAPinAnnotationView* ref = [[MAPinAnnotationView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapNode");
            }
        
            MAHeatMapNode* ref = [[MAHeatMapNode alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapGradient");
            }
        
            MAHeatMapGradient* ref = [[MAHeatMapGradient alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapTileOverlay");
            }
        
            MAHeatMapTileOverlay* ref = [[MAHeatMapTileOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapStatus");
            }
        
            MAMapStatus* ref = [[MAMapStatus alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPointAnnotation");
            }
        
            MAPointAnnotation* ref = [[MAPointAnnotation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACircle");
            }
        
            MACircle* ref = [[MACircle alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAArcRenderer");
            }
        
            MAArcRenderer* ref = [[MAArcRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineMapViewController");
            }
        
            MAOfflineMapViewController* ref = [[MAOfflineMapViewController alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapCustomStyleOptions");
            }
        
            MAMapCustomStyleOptions* ref = [[MAMapCustomStyleOptions alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolygon");
            }
        
            MAPolygon* ref = [[MAPolygon alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlay");
            }
        
            MAParticleOverlay* ref = [[MAParticleOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolyline");
            }
        
            MAPolyline* ref = [[MAPolyline alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiColoredPolylineRenderer");
            }
        
            MAMultiColoredPolylineRenderer* ref = [[MAMultiColoredPolylineRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnimatedAnnotation");
            }
        
            MAAnimatedAnnotation* ref = [[MAAnimatedAnnotation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiTexturePolylineRenderer");
            }
        
            MAMultiTexturePolylineRenderer* ref = [[MAMultiTexturePolylineRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineProvince");
            }
        
            MAOfflineProvince* ref = [[MAOfflineProvince alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapVectorOverlayRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapVectorOverlayRender");
            }
        
            MAHeatMapVectorOverlayRender* ref = [[MAHeatMapVectorOverlayRender alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlayRenderer");
            }
        
            MATileOverlayRenderer* ref = [[MATileOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItem");
            }
        
            MAOfflineItem* ref = [[MAOfflineItem alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGeodesicPolyline");
            }
        
            MAGeodesicPolyline* ref = [[MAGeodesicPolyline alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATouchPoi");
            }
        
            MATouchPoi* ref = [[MATouchPoi alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPathShowRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPathShowRange");
            }
        
            MAPathShowRange data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAPathShowRange)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemMunicipality");
            }
        
            MAOfflineItemMunicipality* ref = [[MAOfflineItemMunicipality alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPolyline");
            }
        
            MAMultiPolyline* ref = [[MAMultiPolyline alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATraceManager");
            }
        
            MATraceManager* ref = [[MATraceManager alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointOverlayRenderer");
            }
        
            MAMultiPointOverlayRenderer* ref = [[MAMultiPointOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAIndoorFloorInfo");
            }
        
            MAIndoorFloorInfo* ref = [[MAIndoorFloorInfo alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAIndoorInfo");
            }
        
            MAIndoorInfo* ref = [[MAIndoorInfo alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolylineRenderer");
            }
        
            MAPolylineRenderer* ref = [[MAPolylineRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnnotationMoveAnimation");
            }
        
            MAAnnotationMoveAnimation* ref = [[MAAnnotationMoveAnimation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAShape");
            }
        
            MAShape* ref = [[MAShape alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnnotationView");
            }
        
            MAAnnotationView* ref = [[MAAnnotationView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlay");
            }
        
            MATileOverlay* ref = [[MATileOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlayPath");
            }
        
            MATileOverlayPath data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MATileOverlayPath)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomCalloutView");
            }
        
            MACustomCalloutView* ref = [[MACustomCalloutView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemCommonCity");
            }
        
            MAOfflineItemCommonCity* ref = [[MAOfflineItemCommonCity alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineMap");
            }
        
            MAOfflineMap* ref = [[MAOfflineMap alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACircleRenderer");
            }
        
            MACircleRenderer* ref = [[MACircleRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayRenderer");
            }
        
            MAParticleOverlayRenderer* ref = [[MAParticleOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateBounds");
            }
        
            MACoordinateBounds data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateBounds)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateSpan");
            }
        
            MACoordinateSpan data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateSpan)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateRegion");
            }
        
            MACoordinateRegion data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapPoint");
            }
        
            MAMapPoint data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapSize");
            }
        
            MAMapSize data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapSize)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapRect");
            }
        
            MAMapRect data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRandomVelocityGenerate");
            }
        
            MAParticleRandomVelocityGenerate* ref = [[MAParticleRandomVelocityGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRandomColorGenerate");
            }
        
            MAParticleRandomColorGenerate* ref = [[MAParticleRandomColorGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleConstantRotationGenerate");
            }
        
            MAParticleConstantRotationGenerate* ref = [[MAParticleConstantRotationGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleCurveSizeGenerate");
            }
        
            MAParticleCurveSizeGenerate* ref = [[MAParticleCurveSizeGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleEmissionModule");
            }
        
            MAParticleEmissionModule* ref = [[MAParticleEmissionModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleSinglePointShapeModule");
            }
        
            MAParticleSinglePointShapeModule* ref = [[MAParticleSinglePointShapeModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRectShapeModule");
            }
        
            MAParticleRectShapeModule* ref = [[MAParticleRectShapeModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverLifeModule");
            }
        
            MAParticleOverLifeModule* ref = [[MAParticleOverLifeModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayOptions");
            }
        
            MAParticleOverlayOptions* ref = [[MAParticleOverlayOptions alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayOptionsFactory");
            }
        
            MAParticleOverlayOptionsFactory* ref = [[MAParticleOverlayOptionsFactory alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOverlayRenderer");
            }
        
            MAOverlayRenderer* ref = [[MAOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAUserLocation");
            }
        
            MAUserLocation* ref = [[MAUserLocation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapVectorNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapVectorNode");
            }
        
            MAHeatMapVectorNode* ref = [[MAHeatMapVectorNode alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapVectorItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapVectorItem");
            }
        
            MAHeatMapVectorItem* ref = [[MAHeatMapVectorItem alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapVectorOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapVectorOverlayOptions");
            }
        
            MAHeatMapVectorOverlayOptions* ref = [[MAHeatMapVectorOverlayOptions alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapVectorOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapVectorOverlay");
            }
        
            MAHeatMapVectorOverlay* ref = [[MAHeatMapVectorOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointItem");
            }
        
            MAMultiPointItem* ref = [[MAMultiPointItem alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointOverlay");
            }
        
            MAMultiPointOverlay* ref = [[MAMultiPointOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlayOption");
            }
        
            MACustomBuildingOverlayOption* ref = [[MACustomBuildingOverlayOption alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlay");
            }
        
            MACustomBuildingOverlay* ref = [[MACustomBuildingOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATracePoint");
            }
        
            MATracePoint* ref = [[MATracePoint alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATraceLocation");
            }
        
            MATraceLocation* ref = [[MATraceLocation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAArc");
            }
        
            MAArc* ref = [[MAArc alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAUserLocationRepresentation");
            }
        
            MAUserLocationRepresentation* ref = [[MAUserLocationRepresentation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapView");
            }
        
            MAMapView* ref = [[MAMapView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOverlayPathRenderer");
            }
        
            MAOverlayPathRenderer* ref = [[MAOverlayPathRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGroundOverlayRenderer");
            }
        
            MAGroundOverlayRenderer* ref = [[MAGroundOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlayRenderer");
            }
        
            MACustomBuildingOverlayRenderer* ref = [[MACustomBuildingOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineCity* ref = [[MAOfflineCity alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineItemNationWide* ref = [[MAOfflineItemNationWide alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiPoint* ref = [[MAMultiPoint alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAGroundOverlay* ref = [[MAGroundOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPolygonRenderer* ref = [[MAPolygonRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPinAnnotationView* ref = [[MAPinAnnotationView alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapNode* ref = [[MAHeatMapNode alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapGradient* ref = [[MAHeatMapGradient alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapTileOverlay* ref = [[MAHeatMapTileOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMapStatus* ref = [[MAMapStatus alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPointAnnotation* ref = [[MAPointAnnotation alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACircle* ref = [[MACircle alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAArcRenderer* ref = [[MAArcRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineMapViewController* ref = [[MAOfflineMapViewController alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMapCustomStyleOptions* ref = [[MAMapCustomStyleOptions alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPolygon* ref = [[MAPolygon alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleOverlay* ref = [[MAParticleOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPolyline* ref = [[MAPolyline alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiColoredPolylineRenderer* ref = [[MAMultiColoredPolylineRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAAnimatedAnnotation* ref = [[MAAnimatedAnnotation alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiTexturePolylineRenderer* ref = [[MAMultiTexturePolylineRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineProvince* ref = [[MAOfflineProvince alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapVectorOverlayRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapVectorOverlayRender* ref = [[MAHeatMapVectorOverlayRender alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATileOverlayRenderer* ref = [[MATileOverlayRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineItem* ref = [[MAOfflineItem alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAGeodesicPolyline* ref = [[MAGeodesicPolyline alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATouchPoi* ref = [[MATouchPoi alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPathShowRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPathShowRange data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAPathShowRange)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineItemMunicipality* ref = [[MAOfflineItemMunicipality alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiPolyline* ref = [[MAMultiPolyline alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATraceManager* ref = [[MATraceManager alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiPointOverlayRenderer* ref = [[MAMultiPointOverlayRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAIndoorFloorInfo* ref = [[MAIndoorFloorInfo alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAIndoorInfo* ref = [[MAIndoorInfo alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAPolylineRenderer* ref = [[MAPolylineRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAAnnotationMoveAnimation* ref = [[MAAnnotationMoveAnimation alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAShape* ref = [[MAShape alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAAnnotationView* ref = [[MAAnnotationView alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATileOverlay* ref = [[MATileOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATileOverlayPath data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MATileOverlayPath)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACustomCalloutView* ref = [[MACustomCalloutView alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineItemCommonCity* ref = [[MAOfflineItemCommonCity alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOfflineMap* ref = [[MAOfflineMap alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACircleRenderer* ref = [[MACircleRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleOverlayRenderer* ref = [[MAParticleOverlayRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACoordinateBounds data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateBounds)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACoordinateSpan data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateSpan)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACoordinateRegion data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateRegion)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMapPoint data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapPoint)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMapSize data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapSize)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMapRect data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapRect)];
                HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
                [resultList addObject:[NSNumber numberWithLong: dataValue.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleRandomVelocityGenerate* ref = [[MAParticleRandomVelocityGenerate alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleRandomColorGenerate* ref = [[MAParticleRandomColorGenerate alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleConstantRotationGenerate* ref = [[MAParticleConstantRotationGenerate alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleCurveSizeGenerate* ref = [[MAParticleCurveSizeGenerate alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleEmissionModule* ref = [[MAParticleEmissionModule alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleSinglePointShapeModule* ref = [[MAParticleSinglePointShapeModule alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleRectShapeModule* ref = [[MAParticleRectShapeModule alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleOverLifeModule* ref = [[MAParticleOverLifeModule alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleOverlayOptions* ref = [[MAParticleOverlayOptions alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAParticleOverlayOptionsFactory* ref = [[MAParticleOverlayOptionsFactory alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOverlayRenderer* ref = [[MAOverlayRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAUserLocation* ref = [[MAUserLocation alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapVectorNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapVectorNode* ref = [[MAHeatMapVectorNode alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapVectorItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapVectorItem* ref = [[MAHeatMapVectorItem alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapVectorOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapVectorOverlayOptions* ref = [[MAHeatMapVectorOverlayOptions alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAHeatMapVectorOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAHeatMapVectorOverlay* ref = [[MAHeatMapVectorOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiPointItem* ref = [[MAMultiPointItem alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMultiPointOverlay* ref = [[MAMultiPointOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACustomBuildingOverlayOption* ref = [[MACustomBuildingOverlayOption alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACustomBuildingOverlay* ref = [[MACustomBuildingOverlay alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATracePoint* ref = [[MATracePoint alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MATraceLocation* ref = [[MATraceLocation alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAArc* ref = [[MAArc alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAUserLocationRepresentation* ref = [[MAUserLocationRepresentation alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAMapView* ref = [[MAMapView alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAOverlayPathRenderer* ref = [[MAOverlayPathRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MAGroundOverlayRenderer* ref = [[MAGroundOverlayRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                MACustomBuildingOverlayRenderer* ref = [[MACustomBuildingOverlayRenderer alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"MAPathShowRangeMake::MAPathShowRangeMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float begin = [args[@"begin"] floatValue];
            // jsonable arg
            float end = [args[@"end"] floatValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPathShowRangeMake::MAPathShowRangeMake(%@, %@)", args[@"begin"], args[@"end"]);
            }
        
            // invoke native method
            MAPathShowRange result = MAPathShowRangeMake(begin, end);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAPathShowRange)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MACoordinateBoundsMake::MACoordinateBoundsMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* northEastValue = (NSValue*) HEAP[args[@"northEast"]];
            CLLocationCoordinate2D northEast;
            [northEastValue getValue:&northEast];
            // struct arg
            NSValue* southWestValue = (NSValue*) HEAP[args[@"southWest"]];
            CLLocationCoordinate2D southWest;
            [southWestValue getValue:&southWest];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACoordinateBoundsMake::MACoordinateBoundsMake(%@, %@)", args[@"northEast"], args[@"southWest"]);
            }
        
            // invoke native method
            MACoordinateBounds result = MACoordinateBoundsMake(northEast, southWest);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateBounds)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MACoordinateSpanMake::MACoordinateSpanMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
            // jsonable arg
            CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACoordinateSpanMake::MACoordinateSpanMake(%@, %@)", args[@"latitudeDelta"], args[@"longitudeDelta"]);
            }
        
            // invoke native method
            MACoordinateSpan result = MACoordinateSpanMake(latitudeDelta, longitudeDelta);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateSpan)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MACoordinateRegionMake::MACoordinateRegionMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) HEAP[args[@"centerCoordinate"]];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // struct arg
            NSValue* spanValue = (NSValue*) HEAP[args[@"span"]];
            MACoordinateSpan span;
            [spanValue getValue:&span];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACoordinateRegionMake::MACoordinateRegionMake(%@, %@)", args[@"centerCoordinate"], args[@"span"]);
            }
        
            // invoke native method
            MACoordinateRegion result = MACoordinateRegionMake(centerCoordinate, span);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MACoordinateRegionMakeWithDistance::MACoordinateRegionMakeWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) HEAP[args[@"centerCoordinate"]];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // jsonable arg
            CLLocationDistance latitudinalMeters = [args[@"latitudinalMeters"] doubleValue];
            // jsonable arg
            CLLocationDistance longitudinalMeters = [args[@"longitudinalMeters"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACoordinateRegionMakeWithDistance::MACoordinateRegionMakeWithDistance(%@, %@, %@)", args[@"centerCoordinate"], args[@"latitudinalMeters"], args[@"longitudinalMeters"]);
            }
        
            // invoke native method
            MACoordinateRegion result = MACoordinateRegionMakeWithDistance(centerCoordinate, latitudinalMeters, longitudinalMeters);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapPointForCoordinate::MAMapPointForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapPointForCoordinate::MAMapPointForCoordinate(%@)", args[@"coordinate"]);
            }
        
            // invoke native method
            MAMapPoint result = MAMapPointForCoordinate(coordinate);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MACoordinateForMapPoint::MACoordinateForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) HEAP[args[@"mapPoint"]];
            MAMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACoordinateForMapPoint::MACoordinateForMapPoint(%@)", args[@"mapPoint"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = MACoordinateForMapPoint(mapPoint);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MACoordinateRegionForMapRect::MACoordinateRegionForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACoordinateRegionForMapRect::MACoordinateRegionForMapRect(%@)", args[@"rect"]);
            }
        
            // invoke native method
            MACoordinateRegion result = MACoordinateRegionForMapRect(rect);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapRectForCoordinateRegion::MAMapRectForCoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) HEAP[args[@"region"]];
            MACoordinateRegion region;
            [regionValue getValue:&region];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectForCoordinateRegion::MAMapRectForCoordinateRegion(%@)", args[@"region"]);
            }
        
            // invoke native method
            MAMapRect result = MAMapRectForCoordinateRegion(region);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMetersPerMapPointAtLatitude::MAMetersPerMapPointAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMetersPerMapPointAtLatitude::MAMetersPerMapPointAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            CLLocationDistance result = MAMetersPerMapPointAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapPointsPerMeterAtLatitude::MAMapPointsPerMeterAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapPointsPerMeterAtLatitude::MAMapPointsPerMeterAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            double result = MAMapPointsPerMeterAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMetersBetweenMapPoints::MAMetersBetweenMapPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* aValue = (NSValue*) HEAP[args[@"a"]];
            MAMapPoint a;
            [aValue getValue:&a];
            // struct arg
            NSValue* bValue = (NSValue*) HEAP[args[@"b"]];
            MAMapPoint b;
            [bValue getValue:&b];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMetersBetweenMapPoints::MAMetersBetweenMapPoints(%@, %@)", args[@"a"], args[@"b"]);
            }
        
            // invoke native method
            CLLocationDistance result = MAMetersBetweenMapPoints(a, b);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAreaBetweenCoordinates::MAAreaBetweenCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* northEastValue = (NSValue*) HEAP[args[@"northEast"]];
            CLLocationCoordinate2D northEast;
            [northEastValue getValue:&northEast];
            // struct arg
            NSValue* southWestValue = (NSValue*) HEAP[args[@"southWest"]];
            CLLocationCoordinate2D southWest;
            [southWestValue getValue:&southWest];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAreaBetweenCoordinates::MAAreaBetweenCoordinates(%@, %@)", args[@"northEast"], args[@"southWest"]);
            }
        
            // invoke native method
            double result = MAAreaBetweenCoordinates(northEast, southWest);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectInset::MAMapRectInset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectInset::MAMapRectInset(%@, %@, %@)", args[@"rect"], args[@"dx"], args[@"dy"]);
            }
        
            // invoke native method
            MAMapRect result = MAMapRectInset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapRectUnion::MAMapRectUnion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[args[@"rect1"]];
            MAMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[args[@"rect2"]];
            MAMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectUnion::MAMapRectUnion(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            MAMapRect result = MAMapRectUnion(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapSizeContainsSize::MAMapSizeContainsSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* size1Value = (NSValue*) HEAP[args[@"size1"]];
            MAMapSize size1;
            [size1Value getValue:&size1];
            // struct arg
            NSValue* size2Value = (NSValue*) HEAP[args[@"size2"]];
            MAMapSize size2;
            [size2Value getValue:&size2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapSizeContainsSize::MAMapSizeContainsSize(%@, %@)", args[@"size1"], args[@"size2"]);
            }
        
            // invoke native method
            BOOL result = MAMapSizeContainsSize(size1, size2);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectContainsPoint::MAMapRectContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            MAMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectContainsPoint::MAMapRectContainsPoint(%@, %@)", args[@"rect"], args[@"point"]);
            }
        
            // invoke native method
            BOOL result = MAMapRectContainsPoint(rect, point);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectIntersectsRect::MAMapRectIntersectsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[args[@"rect1"]];
            MAMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[args[@"rect2"]];
            MAMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectIntersectsRect::MAMapRectIntersectsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = MAMapRectIntersectsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectContainsRect::MAMapRectContainsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[args[@"rect1"]];
            MAMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[args[@"rect2"]];
            MAMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectContainsRect::MAMapRectContainsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = MAMapRectContainsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MACircleContainsPoint::MACircleContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            MAMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* centerValue = (NSValue*) HEAP[args[@"center"]];
            MAMapPoint center;
            [centerValue getValue:&center];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACircleContainsPoint::MACircleContainsPoint(%@, %@, %@)", args[@"point"], args[@"center"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = MACircleContainsPoint(point, center, radius);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MACircleContainsCoordinate::MACircleContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            CLLocationCoordinate2D point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* centerValue = (NSValue*) HEAP[args[@"center"]];
            CLLocationCoordinate2D center;
            [centerValue getValue:&center];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACircleContainsCoordinate::MACircleContainsCoordinate(%@, %@, %@)", args[@"point"], args[@"center"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = MACircleContainsCoordinate(point, center, radius);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAGetNearestMapPointFromPolyline::MAGetNearestMapPointFromPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            MAMapPoint point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray* polylineRefIdArray = (NSArray*) args[@"polyline"];
            MAMapPoint polyline[polylineRefIdArray.count];
        
            for (int __i__ = 0; __i__ < polylineRefIdArray.count; __i__++) {
                NSValue* polylineValue = (NSValue*) HEAP[[polylineRefIdArray objectAtIndex:__i__]];
                MAMapPoint polylineItem;
                [polylineValue getValue:&polylineItem];
                polyline[__i__] = polylineItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetNearestMapPointFromPolyline::MAGetNearestMapPointFromPolyline(%@, %@, %@)", args[@"point"], args[@"polyline"], args[@"count"]);
            }
        
            // invoke native method
            MAMapPoint result = MAGetNearestMapPointFromPolyline(point, polyline, count);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolygonContainsPoint::MAPolygonContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            MAMapPoint point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray* polygonRefIdArray = (NSArray*) args[@"polygon"];
            MAMapPoint polygon[polygonRefIdArray.count];
        
            for (int __i__ = 0; __i__ < polygonRefIdArray.count; __i__++) {
                NSValue* polygonValue = (NSValue*) HEAP[[polygonRefIdArray objectAtIndex:__i__]];
                MAMapPoint polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygonContainsPoint::MAPolygonContainsPoint(%@, %@, %@)", args[@"point"], args[@"polygon"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = MAPolygonContainsPoint(point, polygon, count);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAPolygonContainsCoordinate::MAPolygonContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            CLLocationCoordinate2D point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray* polygonRefIdArray = (NSArray*) args[@"polygon"];
            CLLocationCoordinate2D polygon[polygonRefIdArray.count];
        
            for (int __i__ = 0; __i__ < polygonRefIdArray.count; __i__++) {
                NSValue* polygonValue = (NSValue*) HEAP[[polygonRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygonContainsCoordinate::MAPolygonContainsCoordinate(%@, %@, %@)", args[@"point"], args[@"polygon"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = MAPolygonContainsCoordinate(point, polygon, count);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAGetNearestMapPointFromLine::MAGetNearestMapPointFromLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* lineStartValue = (NSValue*) HEAP[args[@"lineStart"]];
            MAMapPoint lineStart;
            [lineStartValue getValue:&lineStart];
            // struct arg
            NSValue* lineEndValue = (NSValue*) HEAP[args[@"lineEnd"]];
            MAMapPoint lineEnd;
            [lineEndValue getValue:&lineEnd];
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            MAMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetNearestMapPointFromLine::MAGetNearestMapPointFromLine(%@, %@, %@)", args[@"lineStart"], args[@"lineEnd"], args[@"point"]);
            }
        
            // invoke native method
            MAMapPoint result = MAGetNearestMapPointFromLine(lineStart, lineEnd, point);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAAreaForPolygon::MAAreaForPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordinatesRefIdArray.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            int count = [args[@"count"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAreaForPolygon::MAAreaForPolygon(%@, %@)", args[@"coordinates"], args[@"count"]);
            }
        
            // invoke native method
            double result = MAAreaForPolygon(coordinates, count);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapPointMake::MAMapPointMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
            // jsonable arg
            double y = [args[@"y"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapPointMake::MAMapPointMake(%@, %@)", args[@"x"], args[@"y"]);
            }
        
            // invoke native method
            MAMapPoint result = MAMapPointMake(x, y);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapSizeMake::MAMapSizeMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            double width = [args[@"width"] doubleValue];
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapSizeMake::MAMapSizeMake(%@, %@)", args[@"width"], args[@"height"]);
            }
        
            // invoke native method
            MAMapSize result = MAMapSizeMake(width, height);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapSize)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapRectMake::MAMapRectMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
            // jsonable arg
            double y = [args[@"y"] doubleValue];
            // jsonable arg
            double width = [args[@"width"] doubleValue];
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectMake::MAMapRectMake(%@, %@, %@, %@)", args[@"x"], args[@"y"], args[@"width"], args[@"height"]);
            }
        
            // invoke native method
            MAMapRect result = MAMapRectMake(x, y, width, height);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetMinX::MAMapRectGetMinX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetMinX::MAMapRectGetMinX(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetMinX(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetMinY::MAMapRectGetMinY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetMinY::MAMapRectGetMinY(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetMinY(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetMidX::MAMapRectGetMidX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetMidX::MAMapRectGetMidX(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetMidX(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetMidY::MAMapRectGetMidY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetMidY::MAMapRectGetMidY(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetMidY(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetMaxX::MAMapRectGetMaxX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetMaxX::MAMapRectGetMaxX(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetMaxX(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetMaxY::MAMapRectGetMaxY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetMaxY::MAMapRectGetMaxY(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetMaxY(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetWidth::MAMapRectGetWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetWidth::MAMapRectGetWidth(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetWidth(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectGetHeight::MAMapRectGetHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectGetHeight::MAMapRectGetHeight(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = MAMapRectGetHeight(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapPointEqualToPoint::MAMapPointEqualToPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* point1Value = (NSValue*) HEAP[args[@"point1"]];
            MAMapPoint point1;
            [point1Value getValue:&point1];
            // struct arg
            NSValue* point2Value = (NSValue*) HEAP[args[@"point2"]];
            MAMapPoint point2;
            [point2Value getValue:&point2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapPointEqualToPoint::MAMapPointEqualToPoint(%@, %@)", args[@"point1"], args[@"point2"]);
            }
        
            // invoke native method
            BOOL result = MAMapPointEqualToPoint(point1, point2);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapSizeEqualToSize::MAMapSizeEqualToSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* size1Value = (NSValue*) HEAP[args[@"size1"]];
            MAMapSize size1;
            [size1Value getValue:&size1];
            // struct arg
            NSValue* size2Value = (NSValue*) HEAP[args[@"size2"]];
            MAMapSize size2;
            [size2Value getValue:&size2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapSizeEqualToSize::MAMapSizeEqualToSize(%@, %@)", args[@"size1"], args[@"size2"]);
            }
        
            // invoke native method
            BOOL result = MAMapSizeEqualToSize(size1, size2);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectEqualToRect::MAMapRectEqualToRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[args[@"rect1"]];
            MAMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[args[@"rect2"]];
            MAMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectEqualToRect::MAMapRectEqualToRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = MAMapRectEqualToRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapRectIsNull::MAMapRectIsNull": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectIsNull::MAMapRectIsNull(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = MAMapRectIsNull(rect);
        
            // result
            // 返回值: Value
            NSObject* jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
    };
}

@end
