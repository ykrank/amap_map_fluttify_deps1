// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';



mixin com_amap_api_maps_interfaces_IGlOverlayLayer on java_lang_Object {
  

  

  

  

  @mustCallSuper
  Future<void> updateOption(String var1, com_amap_api_maps_model_BaseOptions var2) {
    if (var2 is Ref) kNativeObjectPool.add(var2);
  
    if (fluttifyLogEnabled) {
      debugPrint('updateOption::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> removeOverlay__String(String var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('removeOverlay__String::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> prepareIcon(Object var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('prepareIcon::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<int> getCurrentParticleNum(String var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('getCurrentParticleNum::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> loadBitmapDescription(android_content_Context var1) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
  
    if (fluttifyLogEnabled) {
      debugPrint('loadBitmapDescription::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<com_amap_api_maps_model_BaseOverlay> addOverlayObject(String var1, com_amap_api_maps_model_BaseOverlay var2, com_amap_api_maps_model_BaseOptions var3) {
    if (var2 is Ref) kNativeObjectPool.add(var2);
    if (var3 is Ref) kNativeObjectPool.add(var3);
  
    if (fluttifyLogEnabled) {
      debugPrint('addOverlayObject::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<com_amap_api_maps_model_LatLng> getNearestLatLng(com_amap_api_maps_model_PolylineOptions var1, com_amap_api_maps_model_LatLng var2) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
    if (var2 is Ref) kNativeObjectPool.add(var2);
  
    if (fluttifyLogEnabled) {
      debugPrint('getNearestLatLng::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> IsPolygonContainsPoint(com_amap_api_maps_model_PolygonOptions var1, com_amap_api_maps_model_LatLng var2) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
    if (var2 is Ref) kNativeObjectPool.add(var2);
  
    if (fluttifyLogEnabled) {
      debugPrint('IsPolygonContainsPoint::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> processPolygonHoleOption(com_amap_api_maps_model_PolygonOptions var1) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
  
    if (fluttifyLogEnabled) {
      debugPrint('processPolygonHoleOption::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> IsCircleContainPoint(com_amap_api_maps_model_CircleOptions var1, com_amap_api_maps_model_LatLng var2) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
    if (var2 is Ref) kNativeObjectPool.add(var2);
  
    if (fluttifyLogEnabled) {
      debugPrint('IsCircleContainPoint::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> processCircleHoleOption(com_amap_api_maps_model_CircleOptions var1) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
  
    if (fluttifyLogEnabled) {
      debugPrint('processCircleHoleOption::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> draw(bool var1, int var2) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('draw::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<com_amap_api_maps_model_Polyline> getHitOverlay(com_amap_api_maps_model_LatLng var1) {
    if (var1 is Ref) kNativeObjectPool.add(var1);
  
    if (fluttifyLogEnabled) {
      debugPrint('getHitOverlay::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<String> createId(String var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('createId::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> onCreateAMapInstance() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('onCreateAMapInstance::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<Float64List> getFinalMatrix() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('getFinalMatrix::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> clear(String var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('clear::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> destroy() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('destroy::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> changeOverlayIndex() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('changeOverlayIndex::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setRunLowFrame(bool var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setRunLowFrame::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> removeOverlay__String__bool(String var1, bool var2) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('removeOverlay__String__bool::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}

