// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class MAPathShowRange extends NSObject  {
  //region constants
  static const String name__ = 'MAPathShowRange';

  
  //endregion

  //region creators
  static Future<MAPathShowRange> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('ObjectFactory::createMAPathShowRange');
    final object = MAPathShowRange()..refId = refId..tag__ = 'amap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<MAPathShowRange>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('ObjectFactory::create_batchMAPathShowRange', {'length': length});
  
    final List<MAPathShowRange> typedResult = resultBatch.map((result) => MAPathShowRange()..refId = result..tag__ = 'amap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<double> get_begin() async {
    final __result__ = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod("MAPathShowRange::get_begin", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_end() async {
    final __result__ = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod("MAPathShowRange::get_end", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_begin(double begin) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MAPathShowRange::set_begin', {'refId': refId, "begin": begin});
  
  
  }
  
  Future<void> set_end(double end) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MAPathShowRange::set_end', {'refId': refId, "end": end});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension MAPathShowRange_Batch on List<MAPathShowRange> {
  //region getters
  Future<List<double>> get_begin_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod("MAPathShowRange::get_begin_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_end_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod("MAPathShowRange::get_end_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_begin_batch(List<double> begin) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MAPathShowRange::set_begin_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "begin": begin[__i__]}]);
  
  
  }
  
  Future<void> set_end_batch(List<double> end) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MAPathShowRange::set_end_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "end": end[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}